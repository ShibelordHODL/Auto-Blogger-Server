# Welcome to Graphcool!
#
# This file is the main config file for your Graphcool Service.
# It's very minimal at this point and uses default values.
# We've included a hello world function here.
# Just run `graphcool deploy` to have the first running Graphcool Service.
#
# Check out some examples:
#    https://github.com/graphcool/framework/tree/master/examples
#
# Here are the reference docs of this definition format:
# https://www.graph.cool/docs/reference/service-definition/graphcool.yml-foatho8aip
#
# Happy Coding!


# In the types.graphql you define your data schema
types: ./types.graphql



functions:

# added by email-password template: (please uncomment)
#
  signup:
    type: resolver
    schema: src/email-password/signup.graphql
    handler:
      code: src/email-password/signup.ts

  authenticate:
    type: resolver
    schema: src/email-password/authenticate.graphql
    handler:
      code: src/email-password/authenticate.ts

  loggedInUser:
    type: resolver
    schema: src/email-password/loggedInUser.graphql
    handler:
      code: src/email-password/loggedInUser.ts

  newExtractArticle:
    handler:
      code:
        src: ./src/newExtractArticle.ts
    type: resolver
    schema: ./src/newExtractArticle.graphql

  translate:
    handler:
      code:
        src: ./src/translate.ts
    type: resolver
    schema: ./src/translate.graphql

  process:
    handler:
      code:
        src: ./src/processJob.ts
    type: resolver
    schema: ./src/processJob.graphql

  deleteAll:
    handler:
      code:
        src: ./src/deleteAll.ts
    type: resolver
    schema: ./src/deleteAll.graphql

  uploadImage:
    handler:
      code:
        src: ./src/uploadImage.ts
    type: resolver
    schema: ./src/uploadImage.graphql

  postToSite:
    handler:
      code:
        src: ./src/postToSite.ts
    type: resolver
    schema: ./src/postToSite.graphql

  autoAssign:
    handler:
      code:
        src: ./src/autoAssign.ts
    type: resolver
    schema: ./src/autoAssign.graphql






# Model/Relation permissions are used to limit the API access
# To take the burden of thinking about those while development, we
# preconfigured the wildcard ("*") permission that allows everything
# Read more here:
# https://www.graph.cool/docs/reference/auth/authorization/overview-iegoo0heez
permissions:
  - operation: "*"


# Your root tokens used for functions to get full access to the API
# Read more here:
# https://www.graph.cool/docs/reference/auth/authentication/authentication-tokens-eip7ahqu5o
# rootTokens:
#   - mytoken

