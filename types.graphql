# The following types define the data model of the example service
# based on which the GraphQL API is generated

enum STATUS {
  DRAFTING
  READY
  EXTRACTING
  TRANSLATING
  PUBLISHING
  COMPLETE
  CANCELLED
}
enum SITE_TYPE {
  WORDPRESS
}

# added by email-password template: (please uncomment)
type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  email: String! @isUnique
  password: String!
  sites: [Site!]! @relation (name: "SiteForUser")
}

# Site contains site's configurations for remote posting
type Site @model {
  id: ID! @isUnique
  title: String                 #ref name for the site
  type: SITE_TYPE!              @defaultValue(value: WORDPRESS)
  apiPath: String               # root path for calling the APIs
  token: String                 # site token/credential 
  categories: [CategoryMapping!]!  @relation (name: "CategoryMappingForSite")
  posts: [Post!]!               @relation (name: "PostinSite")

  user: User!                   @relation (name: "SiteForUser")
  createdAt: DateTime!          # read-only (managed by Graphcool)
  updatedAt: DateTime!          # read-only (managed by Graphcool)
}

# Category mapping from article's category to site's category
type CategoryMapping @model {
  id: ID! @isUnique
  title: String                 # Site's name
  categoryCode: String!         # Category's code in wordpress's site
  site: Site!                   @relation (name: "CategoryMappingForSite")
  category: Category!           @relation (name: "MappingToCategory")
  limitPost: Int!               # Maximum posts/day

  createdAt: DateTime!          # read-only (managed by Graphcool)
  updatedAt: DateTime!          # read-only (managed by Graphcool)
}

type Post @model {
  id: ID! @isUnique
  url: String!                  # URL of posted article
  article: Article!             @relation (name: "ArticleInPost")
  site: Site!                   @relation (name: "PostinSite")
  
  postDate: DateTime!           # Date for posting an article
  createdAt: DateTime!          # read-only (managed by Graphcool)
}

type Job @model {
  id: ID! @isUnique
  url: String!
  status: STATUS! @defaultValue(value: DRAFTING)
  rawHTML: String
  rawTitle: String
  rawArticle: String
  rawTranslate: String
  article: Article @relation (name: "JobInArticle")
}

type Article @model {
  id: ID! @isUnique
  url: String
  title: String
  article: String
  categories: [Category!]! @relation (name: "ArticleInCategory")
  # keywords: [Keyword!]! @relation (name: "ArticleInKeyword")
  images: [Image!]! @relation (name: "ImageInArticle")
  wordCount: Int
  excerpt: String
  status: STATUS! @defaultValue(value: DRAFTING)
  job: Job @relation (name: "JobInArticle")
  post: Post @relation (name: "ArticleInPost")
  createdAt: DateTime! # read-only (managed by Graphcool)
}

# type Keyword @model {
#   id: ID! @isUnique
#   keyword: String 
#   articles: [Article!]! @relation (name: "ArticleInKeyword")
# }

type Category @model {
  id: ID! @isUnique
  name: String
  parent: Category @relation (name: "CategoryInParent")
  articles: [Article!]! @relation (name: "ArticleInCategory")
  categoryMapping: [CategoryMapping!]! @relation (name: "MappingToCategory")
}

type Image @model {
  id: ID! @isUnique
  source: String
  article: Article! @relation (name: "ImageInArticle")
}






