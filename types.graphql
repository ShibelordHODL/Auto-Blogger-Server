# The following types define the data model of the example service
# based on which the GraphQL API is generated

enum STATUS {
  EXTRACTING
  ASSIGNING
  TRANSLATING
  IMAGING
  PUBLISHING
  COMPLETE
  CANCELLED
}

enum SITE_TYPE {
  WORDPRESS
}

# enum POST_STATUS {
#   ASSIGNED
#   POSTED
# }

# added by email-password template: (please uncomment)
type User @model {
  # Required system field:
  id: ID! @isUnique # read-only (managed by Graphcool)
  createdAt: DateTime! # read-only (managed by Graphcool)
  updatedAt: DateTime! # read-only (managed by Graphcool)

  email: String! @isUnique
  password: String!
  sites: [Site!]! @relation (name: "SiteForUser")
}

# Site contains site's configurations for remote posting
type Site @model {
  id: ID! @isUnique
  title: String                     #ref name for the site
  type: SITE_TYPE!                  @defaultValue(value: WORDPRESS)
  apiPath: String                   # root path for calling the APIs
  token: String                     # site token/credential
  categories: [SiteCategory!]!      @relation (name: "SiteCategoryInSite")
  jobs: [Job!]!                     @relation (name: "JobForSite")
  posts: [Post!]!                   @relation (name: "PostinSite")

  user: User!                       @relation (name: "SiteForUser")
  createdAt: DateTime!              # read-only (managed by Graphcool)
  updatedAt: DateTime!              # read-only (managed by Graphcool)
}

#Site's Category
type SiteCategory @model {
  id: ID! @isUnique
  title: String                 # Site's name
  ref: Int!                     # Category's code in wordpress's site
  site: Site!                   @relation (name: "SiteCategoryInSite")
  jobs: [Job!]!                 @relation (name: "SiteCategoryInJob")
  category: Category!           @relation (name: "SiteCategoryToCategory")
  # posts: [Post!]!               @relation (name: "siteCategoryInPost")
  limitPost: Int!               # Maximum posts/day

  createdAt: DateTime!          # read-only (managed by Graphcool)
  updatedAt: DateTime!          # read-only (managed by Graphcool)
}

type Post @model {
  id: ID! @isUnique
  url: String!                  # URL of posted article
  # status: POST_STATUS!          @defaultValue(value: EXTRACTING)
  article: Article!             @relation (name: "ArticleInPost")
  site: Site!                   @relation (name: "PostinSite")
  # siteCategory: siteCategory    @relation (name: "siteCategoryInPost")
  createdAt: DateTime!          # read-only (managed by Graphcool)
}

type Job @model {
  id: ID! @isUnique
  url: String! @isUnique
  status: STATUS!               @defaultValue(value: EXTRACTING)
  site: Site                    @relation (name: "JobForSite")
  siteCategory: SiteCategory    @relation (name: "SiteCategoryInJob")
  rawHTML: String
  rawTitle: String
  rawArticle: String
  rawTranslate: String
  article: Article              @relation (name: "JobInArticle")

  postDate: DateTime
}

type Article @model {
  id: ID! @isUnique
  url: String
  title: String
  content: String
  category: Category @relation (name: "ArticleInCategory")
  # siteCategory: SiteCategory @relation (name: "ArticleInSiteCategory")
  # keywords: [Keyword!]! @relation (name: "ArticleInKeyword")
  images: [Image!]! @relation (name: "ImageInArticle")
  wordCount: Int
  excerpt: String
  status: STATUS! @defaultValue(value: EXTRACTING)
  job: Job @relation (name: "JobInArticle")
  post: Post @relation (name: "ArticleInPost")
  publishedDate: DateTime
  createdAt: DateTime! # read-only (managed by Graphcool)
}

type Category @model {
  id: ID! @isUnique
  title: String
  articles: [Article!]! @relation (name: "ArticleInCategory")
  siteCategories: [SiteCategory!]! @relation (name: "SiteCategoryToCategory")
}

type Image @model {
  id: ID! @isUnique
  ref: String!
  postRef: Int
  source: String
  target: String
  article: Article @relation (name: "ImageInArticle")
}






